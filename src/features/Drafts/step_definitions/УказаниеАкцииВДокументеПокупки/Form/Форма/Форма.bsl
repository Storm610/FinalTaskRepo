//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЕстьДокументПоступленияИАкция()","ЕстьДокументПоступленияИАкция","Допустим есть документ поступления и акция");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Допустим есть документ поступления и акция
//@ЕстьДокументПоступленияИАкция()
Процедура ЕстьДокументПоступленияИАкция() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	СоздатьДокументИАкцию();	
	
КонецПроцедуры

//окончание текста модуля

&НаКлиенте
Процедура СоздатьДокументИАкцию()
	
	Ванесса.ЗапретитьВыполнениеШагов();    
	НачальноеИмяФайла   =   "C:\Repo\FinalTaskRepo\tools\Выгрузка и загрузка данных XML.epf";   
	Адрес   =   "";    
	НачатьПомещениеФайла(Новый   ОписаниеОповещения("ЗагрузитьFixtureИзМакетаЗавершение" ,  ЭтотОбъект,   "ПоступлениеИАкция"),   Адрес,   НачальноеИмяФайла,   Ложь);  
	
КонецПроцедуры

&НаКлиенте  
Процедура    ЗагрузитьFixtureИзМакетаЗавершение(УдалосьПоместитьФайл,   Адрес,   ВыбранноеИмяФайла,  ИмяМакета)   Экспорт  
	
	ЗагрузитьFixtureИзМакетаЗавершениеНаСервере(Адрес,   ИмяМакета);    
	Ванесса.ПродолжитьВыполнениеШагов();
	
КонецПроцедуры   

&НаСервере  
Процедура   ЗагрузитьFixtureИзМакетаЗавершениеНаСервере(Адрес,   ИмяМакета)  ИмяВременногоФайла   =   ПолучитьИмяВременногоФайла();    
	
	ДвоичныеДанные   =   ПолучитьИзВременногоХранилища(Адрес);  
	ДвоичныеДанные.Записать(ИмяВременногоФайла);    
	ВнешняяОбработка   =   ВнешниеОбработки.Создать(ИмяВременногоФайла,   Ложь);    
	ИмяВременногоФайла   =   ПолучитьИмяВременногоФайла();    
	Текст   =   РеквизитФормыВЗначение("Объект").ПолучитьМакет(ИмяМакета).ПолучитьТекст();   
	ВременныйДокумент   =   Новый   ТекстовыйДокумент;  ВременныйДокумент.УстановитьТекст(Текст);  
	ВременныйДокумент.Записать(ИмяВременногоФайла,   КодировкаТекста.UTF8 );    
	ВнешняяОбработка.ВыполнитьЗагрузку(ИмяВременногоФайла);  
	
Конецпроцедуры

